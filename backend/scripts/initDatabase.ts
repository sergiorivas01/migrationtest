import { Pool } from 'pg';
import dotenv from 'dotenv';
dotenv.config();

type DbConfig = {
    host: string;
    port: number;
    database: string;
    user: string;
    password?: string;
};

// Configurar objeto de conexi√≥n
const dbConfig: DbConfig = {
    host: process.env.DB_HOST || 'localhost',
    port: process.env.DB_PORT ? Number(process.env.DB_PORT) : 5432,
    database: process.env.DB_NAME || 'imageproject_db',
    user: process.env.DB_USER || 'postgres',
};

// Solo agregar password si est√° definido y no es vac√≠o
if (process.env.DB_PASSWORD) {
    const password = process.env.DB_PASSWORD.trim();
    if (password !== '') {
        dbConfig.password = password;
    }
}

// Usar autenticaci√≥n sin contrase√±a si no se especifica
const pool = new Pool(dbConfig);

async function initDatabase(): Promise<void> {
    try {
        console.log('üîÑ Inicializando base de datos...');

        // Crear tabla de usuarios
        await pool.query(`
            CREATE TABLE IF NOT EXISTS users (
                id SERIAL PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                email VARCHAR(255) UNIQUE NOT NULL,
                phone VARCHAR(50),
                city VARCHAR(100),
                company VARCHAR(255)
            )
        `);
        console.log('‚úÖ Tabla "users" creada');

        // Crear tabla de publicaciones
        await pool.query(`
            CREATE TABLE IF NOT EXISTS posts (
                id SERIAL PRIMARY KEY,
                title VARCHAR(500) NOT NULL,
                body TEXT,
                user_id INTEGER REFERENCES users(id)
            )
        `);
        console.log('‚úÖ Tabla "posts" creada');

        // Crear tabla de tareas
        await pool.query(`
            CREATE TABLE IF NOT EXISTS todos (
                id SERIAL PRIMARY KEY,
                title VARCHAR(500) NOT NULL,
                completed BOOLEAN DEFAULT FALSE
            )
        `);
        console.log('‚úÖ Tabla "todos" creada');

        // Insertar datos de ejemplo si las tablas est√°n vac√≠as
        const usersCount = await pool.query('SELECT COUNT(*) FROM users');
        if (parseInt(usersCount.rows[0].count, 10) === 0) {
            console.log('üìù Insertando datos de ejemplo...');
            
            await pool.query(`
                INSERT INTO users (name, email, phone, city, company) VALUES
                ('Juan P√©rez', 'juan@example.com', '555-0101', 'Madrid', 'Tech Corp'),
                ('Mar√≠a Garc√≠a', 'maria@example.com', '555-0102', 'Barcelona', 'Design Studio'),
                ('Carlos L√≥pez', 'carlos@example.com', '555-0103', 'Valencia', 'Dev Solutions')
            `);
            
            await pool.query(`
                INSERT INTO posts (title, body, user_id) VALUES
                ('Bienvenido al blog', 'Este es mi primer post sobre tecnolog√≠a', 1),
                ('Desarrollo web moderno', 'Aprende las √∫ltimas tendencias en desarrollo', 1),
                ('Dise√±o de interfaces', 'Consejos para crear dise√±os hermosos', 2)
            `);
            
            await pool.query(`
                INSERT INTO todos (title, completed) VALUES
                ('Aprender Node.js', true),
                ('Conectar con PostgreSQL', false),
                ('Crear API REST', false),
                ('Mejorar el dise√±o', true)
            `);
            
            console.log('‚úÖ Datos de ejemplo insertados');
        }

        console.log('üéâ Base de datos inicializada correctamente');
    } catch (error) {
        console.error('‚ùå Error al inicializar la base de datos:', error);
        process.exit(1);
    } finally {
        await pool.end();
    }
}

void initDatabase();


